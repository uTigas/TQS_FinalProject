# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17', '21' ]

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: maven
        
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@v1
    - name: setup-chromedriver
      uses: nanasess/setup-chromedriver@v2

    - name: Start Docker Compose & Test App
      run: docker-compose run app mvn -s maven-settings.xml clean compile test

    - name: Push results to Xray on Jira Cloud
      if: always()
      env:
        XRAYCLOUD_CLIENT_ID: ${{ secrets.XRAYCLOUD_CLIENT_ID }}
        XRAYCLOUD_CLIENT_SECRET: ${{ secrets.XRAYCLOUD_CLIENT_SECRET }}
        XRAYCLOUD_TEST_PLAN_KEY: ${{ secrets.XRAYCLOUD_TEST_PLAN_KEY }}
        REVISON: ${{ github.ref_name}}
        TEST_ENVIRONMENT: java${{ matrix.java }}
    - run: docker-compose run app mvn -s maven-settings.xml verify -Dxray.clientId=${XRAYCLOUD_CLIENT_ID} -Dxray.clientSecret=${XRAYCLOUD_CLIENT_SECRET} -Dxray.testEnvironment=${TEST_ENVIRONMENT} -Dxray.testPlanKey=${XRAYCLOUD_TEST_PLAN_KEY} -Dxray.revision=${REVISION} xray:import-results
