# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI/CD

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17', '21' ]

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: maven
        
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@v1
    - name: setup-chromedriver
      uses: nanasess/setup-chromedriver@v2

    - name: Start Docker Compose 
      run: docker-compose up -d

    - name: Run Sonarcloud Static Analysis
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: 06eb2137628096c9f5d0a5ac5cd55099c15f5b5b
        PROJECT_KEY: uTigas_TQS_FinalProject
        ORGANIZATION: utigas
      run: mvn sonar:sonar -Dsonar.projectKey=${{ env.PROJECT_KEY }}  -Dsonar.organization=${{ env.ORGANIZATION }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ env.SONAR_TOKEN }} -Dsonar.github.oauth=${{ env.GITHUB_TOKEN }} -Dsonar.java.binaries=target/classes  

    - name: Test App
      run: docker-compose exec -T app mvn -s maven-settings.xml -B package --file pom.xml

    - name: Run integration tests
      run: docker-compose exec -T app mvn -s maven-settings.xml -B failsafe:integration-test failsafe:verify --file pom.xml

    - name: Push results to Xray on Jira Cloud
      if: always()
      env:
        XRAYCLOUD_CLIENT_ID: ${{ secrets.XRAYCLOUD_CLIENT_ID }}
        XRAYCLOUD_CLIENT_SECRET: ${{ secrets.XRAYCLOUD_CLIENT_SECRET }}
        XRAYCLOUD_TEST_PLAN_KEY: ${{ secrets.XRAYCLOUD_TEST_PLAN_KEY }}
        
        REVISON: ${{ github.ref_name}}
        TEST_ENVIRONMENT: java${{ matrix.java }}
      run: docker-compose exec -T app mvn -s maven-settings.xml app.getxray:xray-maven-plugin:import-results -Dxray.clientId=${{ env.XRAYCLOUD_CLIENT_ID }} -Dxray.clientSecret=${{ env.XRAYCLOUD_CLIENT_SECRET }} -Dxray.testPlanKey=${{ env.XRAYCLOUD_TEST_PLAN_KEY }} -Dxray.revision=${{ env.REVISON }}
